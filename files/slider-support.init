#!/bin/sh /etc/rc.common

PKG_VERSION=

export START=94
export USE_PROCD=1

readonly packageName='slider-support'
readonly serviceName="$packageName $PKG_VERSION"
export serviceEnabled bootDelay wwanIface wifiRestart apIP wrIP routerServicesList

load_package_config() {
  source /lib/functions.sh
  source /usr/share/libubox/jshn.sh
  source /lib/functions/checkslider.sh
	config_load "$packageName"
  config_get_bool serviceEnabled 'config' 'enabled' 0
  config_get_bool wifiRestart    'config' 'restart_wifi' 0
  config_get bootDelay           'config' 'boot_delay' '10'
  config_get wwanIface           'config' 'wwan_interface' 'trm_wwan'
  config_get apIP                'config' 'ap_ip' 'random'
  config_get wrIP                'config' 'wr_ip' 'random'
  config_get routerServicesList  'config' 'router_service'
}

is_enabled() { load_package_config; [ $serviceEnabled -gt 0 ] && return 0 || return 1; }
set_enabled() { uci -q set "${packageName}.config.enabled"="$1"; uci commit "${packageName}"; }
is_ipv4() { if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then return 0; else return 1; fi; }
randomip(){ local a=300 b=300 n; while [[ "$a" -gt 255 || "$b" -gt 255 ]]; do n=$(grep -m10 -ao '[0-9]' /dev/urandom | tr -d '\n'); a="$(echo ${n:0:3} | sed 's/^0*//;s/^0*$/0/')"; b="$(echo ${n:4:3} | sed 's/^0*//;s/^0*$/0/')"; done; echo "192.168.$a.$b"; }
fix_sta_ssid(){ config_get s $1 'ssid'; if [[ -n "$s" && "$(uci -q get wireless.${1}.mode)" == "sta" ]]; then uci set wireless.${1}.ssid="${s//-err}"; fi; }

modify_fwzone() {
  local cfg="$1" iface="$2" action="$3" wwanIface="$4"
  [[ -z "$cfg" || -z "$iface" || -z "$action" || -z "$wwanIface" ]] && return 1
  config_get name "$cfg" 'name'
  if [ "$name" == "$iface" ]; then
    uci -q del_list firewall.${cfg}.network="$wwanIface";
    [ "$action" == "add" ] && uci -q add_list firewall.${cfg}.network="$wwanIface";
  fi
}

checkports() {
  local up i r=0;
  for i in wan; do
    if /bin/ubus list | grep -q "network.interface.${i}"; then
      json_load "$(/bin/ubus call network.interface.${i} status)"; json_get_vars up;
      [[ "$up" == "1" && $up -gt $r ]] && r=$up
    fi
  done
  return $r
}

router_services() {
  local s command="${1:-stop}"
  for s in $routerServicesList; do
    if [[ -n "$s" && -e /etc/init.d/${s} ]]; then
      case $command in
        start)
          logger -t "$packageName" "$mode enabling/starting $s"
          /etc/init.d/${s} enable
          /etc/init.d/${s} start
          ;;
        stop)
          logger -t "$packageName" "$mode stopping/disabling $s"
          /etc/init.d/${s} stop
          /etc/init.d/${s} disable
          ;;
      esac
    fi
  done
}

slider_action() {
  if checkslider; then mode='router'; elif checkports; then mode='wr'; else mode='ap'; fi
  oldIP="$(uci -q get network.lan.ipaddrold)"
  logger -t "$packageName" "$mode mode selected"
  uci -q set wlanblinker.config.mode="$mode"
  case $mode in
  	router)
  		config_load firewall
      modify_fwzone 'zone' 'wan' 'add' "$wwanIface"
      modify_fwzone 'zone' 'lan' 'del' "$wwanIface"
  		uci set dhcp.@dnsmasq[-1].rebind_protection=1
  		uci -q del network.stabridge
  		uci -q del dhcp.lan.ignore
  		uci -q del network.lan.gateway
  		uci -q del network.lan.dns
  		[ -n "$oldIP" ] && uci set network.lan.ipaddr="$oldIP"
  		uci commit
  		/etc/init.d/relayd stop >/dev/null 2>&1
  		/etc/init.d/relayd disable >/dev/null 2>&1
  		/etc/init.d/firewall enable >/dev/null 2>&1
  		/etc/init.d/firewall start >/dev/null 2>&1
  		/sbin/reload_config
      router_services start
  		;;
  	ap)
      [ -z "$oldIP" ] && uci set network.lan.ipaddrold="$(uci -q get network.lan.ipaddr)"
      if [ "$apIP" == "random" ]; then
        uci set network.lan.ipaddr="$(randomip)"
      elif is_ipv4 "$apIP"; then
        uci set network.lan.ipaddr="$apIP"
      else
        logger -t "$packageName" "$mode mode failed, wrong ap_ip: $apIP"
        return 1
      fi
      config_load firewall
      modify_fwzone 'zone' 'wan' 'add' "$wwanIface"
      modify_fwzone 'zone' 'lan' 'del' "$wwanIface"
  		uci set dhcp.lan.ignore=1
  		uci set dhcp.@dnsmasq[-1].rebind_protection=0
  		uci -q del network.lan.gateway
  		uci -q del network.lan.dns
  		uci -q del network.stabridge
  		uci commit
      router_services stop
  		/etc/init.d/relayd stop >/dev/null 2>&1
  		/etc/init.d/relayd disable >/dev/null 2>&1
  		/etc/init.d/firewall stop >/dev/null 2>&1
  		/etc/init.d/firewall disable >/dev/null 2>&1
  		/sbin/reload_config
  		;;
  	wr)
      [ -z "$oldIP" ] && uci set network.lan.ipaddrold="$(uci -q get network.lan.ipaddr)"
      if [ "$wrIP" == "random" ]; then
        uci set network.lan.ipaddr="$(randomip)"
      elif is_ipv4 "$wrIP"; then
        uci set network.lan.ipaddr="$wrIP"
      else
        logger -t "$packageName" "$mode mode failed, wrong wr_ip: $wrIP"
        return 1
      fi
      config_load firewall
      modify_fwzone 'zone' 'lan' 'add' "$wwanIface"
      modify_fwzone 'zone' 'wan' 'del' "$wwanIface"
  		uci set network.stabridge=interface
  		uci set network.stabridge.proto=relay
  		uci set network.stabridge.network="lan $wwanIface"
  		uci set dhcp.lan.ignore=1
  		uci set dhcp.@dnsmasq[-1].rebind_protection=0
  		uci commit
      router_services stop
  		/etc/init.d/firewall stop >/dev/null 2>&1
  		/etc/init.d/firewall disable >/dev/null 2>&1
  		/etc/init.d/relayd enable >/dev/null 2>&1
  		/etc/init.d/relayd start >/dev/null 2>&1
  		/sbin/reload_config
  		;;
  esac
  if [ $wifiRestart -ne 0 ]; then
    config_load 'wireless'
    config_foreach fix_sta_ssid 'wifi-iface'
    if [ -n "$(uci changes wireless)" ]; then
      uci commit wireless
      /sbin/wifi
    fi
  fi
  [ -e /etc/init.d/travelmate ] && /etc/init.d/travelmate restart
  [ -e /etc/init.d/wlanblinker ] && /etc/init.d/wlanblinker restart
}

boot() { load_package_config; ( sleep $bootDelay && rc_procd start_service & ); }
start_service() { set_enabled '1'; load_package_config; slider_action; }
stop_service() { set_enabled '0'; }
restart_service() { is_enabled && slider_action; }
reload_service() { is_enabled && slider_action; }
